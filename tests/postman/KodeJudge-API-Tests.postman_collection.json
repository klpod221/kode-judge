{
  "info": {
    "name": "KodeJudge API Tests",
    "description": "Comprehensive API test collection for KodeJudge - A code execution and evaluation system",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "timeout",
      "value": "30000",
      "type": "string"
    },
    {
      "key": "waitForProcessing",
      "value": "60000",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check Endpoints",
      "item": [
        {
          "name": "TC-ROOT-001 - Get Root Information",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Get Root Information",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"message\");",
                  "    pm.expect(jsonData).to.have.property(\"version\");",
                  "    pm.expect(jsonData).to.have.property(\"documentation\");",
                  "    pm.expect(jsonData).to.have.property(\"redoc\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.message).to.eql(\"Welcome to KodeJudge API\");",
                  "    pm.expect(jsonData.documentation).to.eql(\"/docs\");",
                  "    pm.expect(jsonData.redoc).to.eql(\"/redoc\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": []
            }
          },
          "response": []
        },
        {
          "name": "TC-HEALTH-001 - Simple Ping",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Simple Ping",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"ok\");",
                  "    pm.expect(jsonData.message).to.eql(\"pong\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/health/ping",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "health",
                "ping"
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-HEALTH-002 - Get Overall Health Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Get Overall Health Status",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"timestamp\");",
                  "    pm.expect(jsonData).to.have.property(\"version\");",
                  "    pm.expect(jsonData).to.have.property(\"database\");",
                  "    pm.expect(jsonData).to.have.property(\"redis\");",
                  "    pm.expect(jsonData).to.have.property(\"workers\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/health/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "health"
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-HEALTH-003 - Check Database Health",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Check Database Health",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/health/database",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "health",
                "database"
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-HEALTH-004 - Check Redis Health",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Check Redis Health",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/health/redis",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "health",
                "redis"
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-HEALTH-005 - Check Workers Health",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Check Workers Health",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"queue_name\");",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/health/workers",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "health",
                "workers"
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-HEALTH-006 - Get System Information",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Get System Information",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"api_version\");",
                  "    pm.expect(jsonData).to.have.property(\"python_version\");",
                  "    pm.expect(jsonData).to.have.property(\"environment\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/health/info",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "health",
                "info"
              ]
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Health Check Endpoints"
    },
    {
      "name": "Languages Endpoints",
      "item": [
        {
          "name": "TC-LANG-001 - Get All Supported Languages",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Get All Supported Languages",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response is an array\", function() {",
                  "    pm.expect(jsonData).to.be.an(\"array\");",
                  "});",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    if (jsonData && jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property(\"id\");",
                  "        pm.expect(jsonData[0]).to.have.property(\"name\");",
                  "        pm.expect(jsonData[0]).to.have.property(\"version\");",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/languages/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "languages"
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-002 - Verify Languages List Not Empty",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Verify Languages List Not Empty",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Array is not empty\", function() {",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/languages/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "languages"
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-003 - Get Valid Language by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Get Valid Language by ID",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "    pm.expect(jsonData).to.have.property(\"name\");",
                  "    pm.expect(jsonData).to.have.property(\"version\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/languages/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "languages",
                "1"
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-004 - Get Non-Existent Language",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Get Non-Existent Language",
                  "",
                  "pm.test(\"Status code is 404\", function() {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/languages/99999",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "languages",
                "99999"
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-005 - Get Language with Invalid ID Format",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Get Language with Invalid ID Format",
                  "",
                  "pm.test(\"Status code is 422\", function() {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/languages/invalid",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "languages",
                "invalid"
              ]
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Languages Endpoints"
    },
    {
      "name": "Submissions - Create Single",
      "item": [
        {
          "name": "TC-SUB-001 - Create Simple Submission (Python Hello World)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Create Simple Submission (Python Hello World)",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "if (jsonData && jsonData.id) {",
                  "    pm.environment.set(\"submission_id\", jsonData.id);",
                  "    console.log(\"Saved submission_id:\", jsonData.id);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"print('Hello, World!')\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-002 - Create Submission with stdin",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Create Submission with stdin",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"name = input()\\nprint(f'Hello, {name}!')\",\n  \"language_id\": 1,\n  \"stdin\": \"klpod221\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-003 - Create Submission with Base64 Encoding",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Create Submission with Base64 Encoding",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "base64_encoded",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"cHJpbnQoJ0hlbGxvLCBXb3JsZCEnKQ==\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-004 - Create Submission with Wait",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Create Submission with Wait",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"print('Hello, World!')\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-005 - Create Submission with Expected Output",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Create Submission with Expected Output",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"print('Hello, World!')\",\n  \"language_id\": 1,\n  \"expected_output\": \"Hello, World!\\n\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-006 - Create Submission with Additional Files",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Create Submission with Additional Files",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"from helper import greet\\ngreet('klpod221')\",\n  \"language_id\": 1,\n  \"additional_files\": [\n    {\n      \"name\": \"helper.py\",\n      \"content\": \"def greet(name):\\n    print(f'Hello, {name}!')\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-007 - Create Submission with Custom Limits",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Create Submission with Custom Limits",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"print('Hello, World!')\",\n  \"language_id\": 1,\n  \"cpu_time_limit\": 1,\n  \"memory_limit\": 128000,\n  \"number_of_runs\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-008 - Create Submission with Invalid Language ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Create Submission with Invalid Language ID",
                  "",
                  "pm.test(\"Status code is 404\", function() {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"print('test')\",\n  \"language_id\": 99999\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-009 - Create Submission with Missing Source Code",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Create Submission with Missing Source Code",
                  "",
                  "pm.test(\"Status code is 422\", function() {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-011 - Create Submission with Runtime Error",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Create Submission with Runtime Error",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stderr\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"print(1/0)\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-012 - Create Submission with Redirect stderr to stdout",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Create Submission with Redirect stderr to stdout",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"import sys\\nprint('stdout')\\nprint('stderr', file=sys.stderr)\",\n  \"language_id\": 1,\n  \"redirect_stderr_to_stdout\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Submissions - Create Single"
    },
    {
      "name": "Submissions - Create Batch",
      "item": [
        {
          "name": "TC-SUB-013 - Create Multiple Submissions",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Create Multiple Submissions",
                  "",
                  "pm.test(\"Status code is 201\", function() {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "if (jsonData && Array.isArray(jsonData) && jsonData.length > 0) {",
                  "    const ids = jsonData.map(item => item.id).join(',');",
                  "    pm.environment.set(\"batch_submission_ids\", ids);",
                  "    pm.environment.set(\"batch_submission\", jsonData[0].id);",
                  "    console.log(\"Saved batch_submission_ids:\", ids);",
                  "}",
                  "",
                  "pm.test(\"Response is an array\", function() {",
                  "    pm.expect(jsonData).to.be.an(\"array\");",
                  "});",
                  "",
                  "pm.test(\"Array has 2 items\", function() {",
                  "    pm.expect(jsonData).to.have.lengthOf(2);",
                  "});",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    if (jsonData && jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property(\"id\");",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/batch",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions",
                "batch"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"source_code\": \"print('Test 1')\",\n    \"language_id\": 1\n  },\n  {\n    \"source_code\": \"print('Test 2')\",\n    \"language_id\": 1\n  }\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-014 - Create Batch with Base64 Encoding",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Create Batch with Base64 Encoding",
                  "",
                  "pm.test(\"Status code is 201\", function() {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response is an array\", function() {",
                  "    pm.expect(jsonData).to.be.an(\"array\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/batch",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions",
                "batch"
              ],
              "query": [
                {
                  "key": "base64_encoded",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"source_code\": \"cHJpbnQoJ1Rlc3QgMScp\",\n    \"language_id\": 1\n  }\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-015 - Create Empty Batch",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Create Empty Batch",
                  "",
                  "pm.test(\"Status code is 201\", function() {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response is an array\", function() {",
                  "    pm.expect(jsonData).to.be.an(\"array\");",
                  "});",
                  "",
                  "pm.test(\"Array has 0 items\", function() {",
                  "    pm.expect(jsonData).to.have.lengthOf(0);",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/batch",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions",
                "batch"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "[]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-016 - Create Batch with Invalid Language",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Create Batch with Invalid Language",
                  "",
                  "pm.test(\"Status code is 404\", function() {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/batch",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions",
                "batch"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"source_code\": \"print('Valid')\",\n    \"language_id\": 1\n  },\n  {\n    \"source_code\": \"print('Invalid')\",\n    \"language_id\": 99999\n  }\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Submissions - Create Batch"
    },
    {
      "name": "Submissions - Get Single",
      "item": [
        {
          "name": "TC-SUB-017 - Get Submission by Valid ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Get Submission by Valid ID",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"language_id\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/{{submission_id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions",
                "{submission_id}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-018 - Get Submission with Custom Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Get Submission with Custom Fields",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/{{submission_id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions",
                "{submission_id}"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "default,meta,additional_files"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-019 - Get Submission with All Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Get Submission with All Fields",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/{{submission_id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions",
                "{submission_id}"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "all"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-020 - Get Submission with Base64 Encoding",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Get Submission with Base64 Encoding",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/{{submission_id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions",
                "{submission_id}"
              ],
              "query": [
                {
                  "key": "base64_encoded",
                  "value": "true"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-021 - Get Non-Existent Submission",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Get Non-Existent Submission",
                  "",
                  "pm.test(\"Status code is 404\", function() {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/00000000-0000-0000-0000-000000000000",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions",
                "00000000-0000-0000-0000-000000000000"
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-022 - Get Submission with Invalid UUID Format",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Get Submission with Invalid UUID Format",
                  "",
                  "pm.test(\"Status code is 422\", function() {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/invalid-uuid",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions",
                "invalid-uuid"
              ]
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Submissions - Get Single"
    },
    {
      "name": "Submissions - Get Batch",
      "item": [
        {
          "name": "TC-SUB-023 - Get Multiple Submissions by IDs",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Get Multiple Submissions by IDs",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response is an array\", function() {",
                  "    pm.expect(jsonData).to.be.an(\"array\");",
                  "});",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    if (jsonData && jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property(\"id\");",
                  "        pm.expect(jsonData[0]).to.have.property(\"status\");",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/batch",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions",
                "batch"
              ],
              "query": [
                {
                  "key": "ids",
                  "value": "{{batch_submission_ids}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-024 - Get Batch with Single ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Get Batch with Single ID",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response is an array\", function() {",
                  "    pm.expect(jsonData).to.be.an(\"array\");",
                  "});",
                  "",
                  "pm.test(\"Array has 1 items\", function() {",
                  "    pm.expect(jsonData).to.have.lengthOf(1);",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/batch",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions",
                "batch"
              ],
              "query": [
                {
                  "key": "ids",
                  "value": "{{submission_id}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-025 - Get Batch with Custom Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Get Batch with Custom Fields",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response is an array\", function() {",
                  "    pm.expect(jsonData).to.be.an(\"array\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/batch",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions",
                "batch"
              ],
              "query": [
                {
                  "key": "ids",
                  "value": "{{submission_id}}"
                },
                {
                  "key": "fields",
                  "value": "default,meta,additional_files"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-026 - Get Batch with Base64 Encoding",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Get Batch with Base64 Encoding",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response is an array\", function() {",
                  "    pm.expect(jsonData).to.be.an(\"array\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/batch",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions",
                "batch"
              ],
              "query": [
                {
                  "key": "ids",
                  "value": "{{submission_id}}"
                },
                {
                  "key": "base64_encoded",
                  "value": "true"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-027 - Get Batch with Invalid UUID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Get Batch with Invalid UUID",
                  "",
                  "pm.test(\"Status code is 400\", function() {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/batch",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions",
                "batch"
              ],
              "query": [
                {
                  "key": "ids",
                  "value": "invalid-uuid"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-028 - Get Batch with Non-Existent ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Get Batch with Non-Existent ID",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response is an array\", function() {",
                  "    pm.expect(jsonData).to.be.an(\"array\");",
                  "});",
                  "",
                  "pm.test(\"Array has 0 items\", function() {",
                  "    pm.expect(jsonData).to.have.lengthOf(0);",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/batch",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions",
                "batch"
              ],
              "query": [
                {
                  "key": "ids",
                  "value": "00000000-0000-0000-0000-000000000000"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-029 - Get Batch with Mixed Valid and Invalid IDs",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Get Batch with Mixed Valid and Invalid IDs",
                  "",
                  "pm.test(\"Status code is 400\", function() {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/batch",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions",
                "batch"
              ],
              "query": [
                {
                  "key": "ids",
                  "value": "{{submission_id}},invalid"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-030 - Get Batch with Empty IDs Parameter",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Get Batch with Empty IDs Parameter",
                  "",
                  "pm.test(\"Status code is 422\", function() {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/batch",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions",
                "batch"
              ],
              "query": [
                {
                  "key": "ids",
                  "value": ""
                }
              ]
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Submissions - Get Batch"
    },
    {
      "name": "Submissions - List and Pagination",
      "item": [
        {
          "name": "TC-SUB-031 - List Submissions with Default Pagination",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: List Submissions with Default Pagination",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"items\");",
                  "    pm.expect(jsonData).to.have.property(\"total_items\");",
                  "    pm.expect(jsonData).to.have.property(\"total_pages\");",
                  "    pm.expect(jsonData).to.have.property(\"current_page\");",
                  "    pm.expect(jsonData).to.have.property(\"page_size\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-032 - List Submissions Page 2",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: List Submissions Page 2",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"items\");",
                  "    pm.expect(jsonData).to.have.property(\"current_page\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.current_page).to.eql(2);",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "2"
                },
                {
                  "key": "page_size",
                  "value": "5"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-033 - List with Custom Page Size",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: List with Custom Page Size",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"page_size\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.page_size).to.eql(20);",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "page_size",
                  "value": "20"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-034 - List with Maximum Page Size",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: List with Maximum Page Size",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"page_size\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.page_size).to.eql(100);",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "page_size",
                  "value": "100"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-035 - List with Page Size Exceeding Maximum",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: List with Page Size Exceeding Maximum",
                  "",
                  "pm.test(\"Status code is 422\", function() {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "page_size",
                  "value": "101"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-036 - List with Invalid Page Number (Zero)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: List with Invalid Page Number (Zero)",
                  "",
                  "pm.test(\"Status code is 422\", function() {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-041 - List with Negative Page Number",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: List with Negative Page Number",
                  "",
                  "pm.test(\"Status code is 422\", function() {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "-1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-042 - List with Custom Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: List with Custom Fields",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"items\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "default,source_code,meta"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-043 - List with Base64 Encoding",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: List with Base64 Encoding",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"items\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "base64_encoded",
                  "value": "true"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-044 - List Very Large Page Number",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: List Very Large Page Number",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"items\");",
                  "    pm.expect(jsonData).to.have.property(\"current_page\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "9999"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Submissions - List and Pagination"
    },
    {
      "name": "Submissions - Delete",
      "item": [
        {
          "name": "TC-SUB-037 - Delete Existing Submission",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Delete Existing Submission",
                  "",
                  "pm.test(\"Status code is 204\", function() {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/{{submission_id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions",
                "{submission_id}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-038 - Delete Non-Existent Submission",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Delete Non-Existent Submission",
                  "",
                  "pm.test(\"Status code is 404\", function() {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/00000000-0000-0000-0000-000000000000",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions",
                "00000000-0000-0000-0000-000000000000"
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-SUB-040 - Delete with Invalid UUID Format",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Delete with Invalid UUID Format",
                  "",
                  "pm.test(\"Status code is 422\", function() {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/invalid-uuid",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions",
                "invalid-uuid"
              ]
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Submissions - Delete"
    },
    {
      "name": "Submissions - Compilation Errors",
      "item": [
        {
          "name": "TC-COMPILE-001 - Python Syntax Error",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Python Syntax Error",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stderr\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"print('Hello World'\\n# Missing closing parenthesis\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-COMPILE-002 - Indentation Error",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Indentation Error",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stderr\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"def test():\\nprint('wrong indent')\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-COMPILE-003 - Import Error - Non-existent Module",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Import Error - Non-existent Module",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stderr\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"import nonexistent_module\\nprint('test')\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-COMPILE-004 - Multiple Syntax Errors",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Multiple Syntax Errors",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stderr\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"if True\\n    print 'missing colon and parentheses'\\n        wrong indent\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-COMPILE-005 - Invalid Function Definition",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Invalid Function Definition",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stderr\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"def (invalid):\\n    pass\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Submissions - Compilation Errors"
    },
    {
      "name": "Submissions - Runtime Errors",
      "item": [
        {
          "name": "TC-RUNTIME-001 - Division by Zero",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Division by Zero",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stderr\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"result = 1 / 0\\nprint(result)\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-RUNTIME-002 - Index Out of Range",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Index Out of Range",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stderr\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"arr = [1, 2, 3]\\nprint(arr[10])\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-RUNTIME-003 - Key Error in Dictionary",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Key Error in Dictionary",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stderr\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"d = {'a': 1}\\nprint(d['b'])\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-RUNTIME-004 - Type Error",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Type Error",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stderr\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"result = '2' + 2\\nprint(result)\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-RUNTIME-005 - Attribute Error",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Attribute Error",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stderr\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"x = 5\\nx.nonexistent_method()\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-RUNTIME-006 - Recursion Error",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Recursion Error",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stderr\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"def recursive():\\n    recursive()\\nrecursive()\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Submissions - Runtime Errors"
    },
    {
      "name": "Submissions - Time Limits",
      "item": [
        {
          "name": "TC-TIME-001 - CPU Time Limit Exceeded",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: CPU Time Limit Exceeded",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"meta\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"import time\\nwhile True:\\n    x = 1 + 1\",\n  \"language_id\": 1,\n  \"cpu_time_limit\": 0.5\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-TIME-002 - Custom CPU Time Limit",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Custom CPU Time Limit",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"import time\\ntime.sleep(0.1)\\nprint('Done')\",\n  \"language_id\": 1,\n  \"cpu_time_limit\": 2\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-TIME-003 - Wall Time Limit",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Wall Time Limit",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"meta\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"import time\\ntime.sleep(2)\\nprint('Done')\",\n  \"language_id\": 1,\n  \"wall_time_limit\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-TIME-004 - Short Execution Time",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Short Execution Time",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"meta\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"print('Quick')\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-TIME-005 - Multiple Runs with Time Tracking",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Multiple Runs with Time Tracking",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"meta\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"import time\\ntime.sleep(0.01)\\nprint('Run')\",\n  \"language_id\": 1,\n  \"number_of_runs\": 3\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Submissions - Time Limits"
    },
    {
      "name": "Submissions - Memory Limits",
      "item": [
        {
          "name": "TC-MEMORY-001 - Memory Limit Exceeded",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Memory Limit Exceeded",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"meta\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"data = 'x' * (100 * 1024 * 1024)\\nprint('Done')\",\n  \"language_id\": 1,\n  \"memory_limit\": 50000\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-MEMORY-002 - Custom Memory Limit Success",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Custom Memory Limit Success",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"data = [i for i in range(1000)]\\nprint(len(data))\",\n  \"language_id\": 1,\n  \"memory_limit\": 256000\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-MEMORY-003 - Large List Allocation",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Large List Allocation",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"meta\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"big_list = [0] * 10000000\\nprint('Allocated')\",\n  \"language_id\": 1,\n  \"memory_limit\": 512000\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-MEMORY-004 - Memory Usage Tracking",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Memory Usage Tracking",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"meta\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"import sys\\nprint(sys.getsizeof([]))\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Submissions - Memory Limits"
    },
    {
      "name": "Submissions - Additional Files",
      "item": [
        {
          "name": "TC-FILES-001 - Multiple Additional Files",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Multiple Additional Files",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"from utils import add, multiply\\nprint(add(2, 3))\\nprint(multiply(4, 5))\",\n  \"language_id\": 1,\n  \"additional_files\": [\n    {\n      \"name\": \"utils.py\",\n      \"content\": \"def add(a, b):\\n    return a + b\\n\\ndef multiply(a, b):\\n    return a * b\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-FILES-002 - Additional Files with Dependencies",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Additional Files with Dependencies",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"from main_helper import process\\nprint(process('test'))\",\n  \"language_id\": 1,\n  \"additional_files\": [\n    {\n      \"name\": \"main_helper.py\",\n      \"content\": \"from sub_helper import transform\\n\\ndef process(data):\\n    return transform(data)\"\n    },\n    {\n      \"name\": \"sub_helper.py\",\n      \"content\": \"def transform(s):\\n    return s.upper()\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-FILES-003 - Additional Files with Base64",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Additional Files with Base64",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                },
                {
                  "key": "base64_encoded",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"ZnJvbSBoZWxwZXIgaW1wb3J0IGdyZWV0CmdyZWV0KCdXb3JsZCcp\",\n  \"language_id\": 1,\n  \"additional_files\": [\n    {\n      \"name\": \"helper.py\",\n      \"content\": \"ZGVmIGdyZWV0KG5hbWUpOgogICAgcHJpbnQoZidIZWxsbywge25hbWV9IScp\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-FILES-004 - Missing Additional File Import",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Missing Additional File Import",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stderr\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"from nonexistent import func\\nfunc()\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-FILES-005 - Additional File with Syntax Error",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Additional File with Syntax Error",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stderr\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"from broken import test\\ntest()\",\n  \"language_id\": 1,\n  \"additional_files\": [\n    {\n      \"name\": \"broken.py\",\n      \"content\": \"def test(\\n    print('broken')\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-FILES-006 - JSON Additional File",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: JSON Additional File",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"import json\\nwith open('data.json', 'r') as f:\\n    data = json.load(f)\\n    print(data['name'])\",\n  \"language_id\": 1,\n  \"additional_files\": [\n    {\n      \"name\": \"data.json\",\n      \"content\": \"{\\\"name\\\": \\\"KodeJudge\\\", \\\"version\\\": \\\"1.0\\\"}\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Submissions - Additional Files"
    },
    {
      "name": "Submissions - Expected Output",
      "item": [
        {
          "name": "TC-OUTPUT-001 - Exact Output Match",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Exact Output Match",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"print('Hello, World!')\",\n  \"language_id\": 1,\n  \"expected_output\": \"Hello, World!\\n\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-OUTPUT-002 - Wrong Answer",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Wrong Answer",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"print('Hello, Universe!')\",\n  \"language_id\": 1,\n  \"expected_output\": \"Hello, World!\\n\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-OUTPUT-003 - Multi-line Output Match",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Multi-line Output Match",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"print('Line 1')\\nprint('Line 2')\\nprint('Line 3')\",\n  \"language_id\": 1,\n  \"expected_output\": \"Line 1\\nLine 2\\nLine 3\\n\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-OUTPUT-004 - Empty Expected Output",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Empty Expected Output",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"# No output\",\n  \"language_id\": 1,\n  \"expected_output\": \"\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-OUTPUT-005 - Output with Special Characters",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Output with Special Characters",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"print('Hello! @#$%^&*()')\",\n  \"language_id\": 1,\n  \"expected_output\": \"Hello! @#$%^&*()\\n\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-OUTPUT-006 - Numeric Output Match",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Numeric Output Match",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"print(42)\",\n  \"language_id\": 1,\n  \"expected_output\": \"42\\n\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-OUTPUT-007 - Output with Unicode",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Output with Unicode",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"print('你好世界 🌍')\",\n  \"language_id\": 1,\n  \"expected_output\": \"你好世界 🌍\\n\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-OUTPUT-008 - Trailing Whitespace Difference",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Trailing Whitespace Difference",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"print('Hello')\",\n  \"language_id\": 1,\n  \"expected_output\": \"Hello   \\n\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Submissions - Expected Output"
    },
    {
      "name": "Submissions - Number of Runs",
      "item": [
        {
          "name": "TC-RUNS-001 - Single Run",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Single Run",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"meta\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"print('Single run')\",\n  \"language_id\": 1,\n  \"number_of_runs\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-RUNS-002 - Multiple Runs (5 times)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Multiple Runs (5 times)",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"meta\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"import random\\nprint(random.randint(1, 100))\",\n  \"language_id\": 1,\n  \"number_of_runs\": 5\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-RUNS-003 - Maximum Runs",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Maximum Runs",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"meta\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"print('x')\",\n  \"language_id\": 1,\n  \"number_of_runs\": 10\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-RUNS-004 - Zero Runs (Invalid)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Zero Runs (Invalid)",
                  "",
                  "pm.test(\"Status code is 422\", function() {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"print('test')\",\n  \"language_id\": 1,\n  \"number_of_runs\": 0\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Submissions - Number of Runs"
    },
    {
      "name": "Submissions - Sandbox Flags",
      "item": [
        {
          "name": "TC-SANDBOX-001 - Redirect stderr to stdout Enabled",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Redirect stderr to stdout Enabled",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"import sys\\nprint('stdout message')\\nprint('stderr message', file=sys.stderr)\",\n  \"language_id\": 1,\n  \"redirect_stderr_to_stdout\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-SANDBOX-002 - Redirect stderr to stdout Disabled",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Redirect stderr to stdout Disabled",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "    pm.expect(jsonData).to.have.property(\"stderr\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"import sys\\nprint('stdout message')\\nprint('stderr message', file=sys.stderr)\",\n  \"language_id\": 1,\n  \"redirect_stderr_to_stdout\": false\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-SANDBOX-003 - Network Disabled (Default)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Network Disabled (Default)",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"import urllib.request\\ntry:\\n    urllib.request.urlopen('http://example.com')\\n    print('Network accessible')\\nexcept:\\n    print('Network blocked')\",\n  \"language_id\": 1,\n  \"enable_network\": false\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-SANDBOX-004 - Max File Size Limit",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Max File Size Limit",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"with open('output.txt', 'w') as f:\\n    f.write('x' * (5 * 1024 * 1024))\\nprint('File written')\",\n  \"language_id\": 1,\n  \"max_file_size\": 1024\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-SANDBOX-005 - Process Limit",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Process Limit",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"import multiprocessing\\ntry:\\n    processes = [multiprocessing.Process(target=lambda: None) for _ in range(100)]\\n    for p in processes:\\n        p.start()\\n    print('Processes started')\\nexcept:\\n    print('Process limit reached')\",\n  \"language_id\": 1,\n  \"max_processes_and_or_threads\": 5\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Submissions - Sandbox Flags"
    },
    {
      "name": "Submissions - Security Tests",
      "item": [
        {
          "name": "TC-SECURITY-001 - File System Access Attempt",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: File System Access Attempt",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"try:\\n    with open('/etc/passwd', 'r') as f:\\n        print(f.read())\\nexcept:\\n    print('Access denied')\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-SECURITY-002 - System Command Execution",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: System Command Execution",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"import os\\ntry:\\n    os.system('ls -la')\\n    print('Command executed')\\nexcept:\\n    print('Command blocked')\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-SECURITY-003 - Infinite Loop Protection",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Infinite Loop Protection",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"meta\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"while True:\\n    pass\",\n  \"language_id\": 1,\n  \"cpu_time_limit\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-SECURITY-004 - Fork Bomb Protection",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Fork Bomb Protection",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"import os\\ntry:\\n    while True:\\n        os.fork()\\nexcept:\\n    print('Fork blocked')\",\n  \"language_id\": 1,\n  \"max_processes_and_or_threads\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-SECURITY-005 - Environment Variable Access",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Environment Variable Access",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"import os\\nprint(len(os.environ))\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-SECURITY-006 - Large Output Generation",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Large Output Generation",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"for i in range(100000):\\n    print('x' * 1000)\",\n  \"language_id\": 1,\n  \"cpu_time_limit\": 2\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Submissions - Security Tests"
    },
    {
      "name": "Error Handling",
      "item": [
        {
          "name": "TC-ERROR-001 - Invalid HTTP Method",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Invalid HTTP Method",
                  "",
                  "pm.test(\"Status code is 405\", function() {",
                  "    pm.response.to.have.status(405);",
                  "});",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"print('test')\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-ERROR-002 - Missing Required Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Missing Required Fields",
                  "",
                  "pm.test(\"Status code is 422\", function() {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-ERROR-003 - Invalid Data Types",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Invalid Data Types",
                  "",
                  "pm.test(\"Status code is 422\", function() {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": 123,\n  \"language_id\": \"invalid\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-ERROR-004 - Malformed JSON",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Malformed JSON",
                  "",
                  "pm.test(\"Status code is 422\", function() {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "\"not a json\"",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-ERROR-005 - Negative Resource Limits",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Negative Resource Limits",
                  "",
                  "pm.test(\"Status code is 422\", function() {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"print('test')\",\n  \"language_id\": 1,\n  \"cpu_time_limit\": -1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-ERROR-006 - Invalid Base64 Encoding",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Invalid Base64 Encoding",
                  "",
                  "pm.test(\"Status code is 400\", function() {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "base64_encoded",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"not-valid-base64!!!\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Error Handling"
    },
    {
      "name": "Edge Cases",
      "item": [
        {
          "name": "TC-EDGE-001 - Very Long Source Code",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Very Long Source Code",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"# Long code with many print statements\\nfor i in range(1000):\\n    print(f'Line {i}')\\nprint('Done')\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-EDGE-002 - Empty Source Code",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Empty Source Code",
                  "",
                  "pm.test(\"Status code is 422\", function() {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-EDGE-003 - Unicode Characters",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Unicode Characters",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"print('Hello, 世界! 🌍')\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-EDGE-004 - Only Whitespace Source Code",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Only Whitespace Source Code",
                  "",
                  "pm.test(\"Status code is 422\", function() {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"   \\n\\n\\t\\t  \\n\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-EDGE-005 - Only Comments",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Only Comments",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"# This is a comment\\n# Another comment\\n# No actual code\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-EDGE-006 - Very Long stdin",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Very Long stdin",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"import sys\\ndata = sys.stdin.read()\\nprint(len(data))\",\n  \"language_id\": 1,\n  \"stdin\": \"This is a very long input that simulates a large data stream. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-EDGE-007 - Special Characters in stdin",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Special Characters in stdin",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"data = input()\\nprint(f'Got: {data}')\",\n  \"language_id\": 1,\n  \"stdin\": \"!@#$%^&*()[]{}|\\\\:;\\\"'<>?,./~`\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-EDGE-008 - Multi-line stdin",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Multi-line stdin",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"import sys\\nlines = sys.stdin.readlines()\\nprint(len(lines))\",\n  \"language_id\": 1,\n  \"stdin\": \"line1\\nline2\\nline3\\nline4\\nline5\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-EDGE-009 - NULL Character in Code",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: NULL Character in Code",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"print('Before')\\nprint('After')\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-EDGE-010 - Maximum Integer Value",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Maximum Integer Value",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"import sys\\nprint(sys.maxsize)\\nprint(2**63 - 1)\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Edge Cases"
    },
    {
      "name": "Concurrent Operations",
      "item": [
        {
          "name": "TC-CONCURRENT-001 - Create Submission for Concurrency Test 1",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Create Submission for Concurrency Test 1",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "if (jsonData && jsonData.id) {",
                  "    pm.environment.set(\"concurrent_id_1\", jsonData.id);",
                  "    console.log(\"Saved concurrent_id_1:\", jsonData.id);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"print('Concurrent 1')\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-CONCURRENT-002 - Create Submission for Concurrency Test 2",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Create Submission for Concurrency Test 2",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "if (jsonData && jsonData.id) {",
                  "    pm.environment.set(\"concurrent_id_2\", jsonData.id);",
                  "    console.log(\"Saved concurrent_id_2:\", jsonData.id);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"print('Concurrent 2')\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-CONCURRENT-003 - Get Multiple Submissions Simultaneously",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Get Multiple Submissions Simultaneously",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/{{concurrent_id_1}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions",
                "{concurrent_id_1}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-CONCURRENT-004 - Batch Creation Stress Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Batch Creation Stress Test",
                  "",
                  "pm.test(\"Status code is 201\", function() {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response is an array\", function() {",
                  "    pm.expect(jsonData).to.be.an(\"array\");",
                  "});",
                  "",
                  "pm.test(\"Array has 5 items\", function() {",
                  "    pm.expect(jsonData).to.have.lengthOf(5);",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/batch",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions",
                "batch"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"source_code\": \"print('Batch 1')\",\n    \"language_id\": 1\n  },\n  {\n    \"source_code\": \"print('Batch 2')\",\n    \"language_id\": 1\n  },\n  {\n    \"source_code\": \"print('Batch 3')\",\n    \"language_id\": 1\n  },\n  {\n    \"source_code\": \"print('Batch 4')\",\n    \"language_id\": 1\n  },\n  {\n    \"source_code\": \"print('Batch 5')\",\n    \"language_id\": 1\n  }\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Concurrent Operations"
    },
    {
      "name": "Data Encoding",
      "item": [
        {
          "name": "TC-ENCODE-001 - Base64 Encode and Decode Roundtrip",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Base64 Encode and Decode Roundtrip",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "base64_encoded",
                  "value": "true"
                },
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"cHJpbnQoJ0Jhc2U2NCBUZXN0Jyk=\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-ENCODE-002 - Base64 with Special Characters",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Base64 with Special Characters",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "base64_encoded",
                  "value": "true"
                },
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"cHJpbnQoJ+KYhSDwn46JIPCfkY0nKQ==\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-ENCODE-003 - Base64 stdin",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Base64 stdin",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "base64_encoded",
                  "value": "true"
                },
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"ZGF0YSA9IGlucHV0KCkKcHJpbnQoZidHb3Q6IHtkYXRhfScp\",\n  \"language_id\": 1,\n  \"stdin\": \"SGVsbG8gV29ybGQh\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-ENCODE-004 - Get with Base64 Response",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Get with Base64 Response",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "if (jsonData && jsonData.id) {",
                  "    pm.environment.set(\"encode_test_id\", jsonData.id);",
                  "    console.log(\"Saved encode_test_id:\", jsonData.id);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"print('Encode me')\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-ENCODE-005 - Retrieve Encoded Submission",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Retrieve Encoded Submission",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"source_code\");",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/{{encode_test_id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions",
                "{encode_test_id}"
              ],
              "query": [
                {
                  "key": "base64_encoded",
                  "value": "true"
                },
                {
                  "key": "fields",
                  "value": "default,source_code"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Data Encoding"
    },
    {
      "name": "Field Filtering",
      "item": [
        {
          "name": "TC-FIELDS-000 - Create Submission for Field Tests",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Create Submission for Field Tests",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "if (jsonData && jsonData.id) {",
                  "    pm.environment.set(\"field_test_id\", jsonData.id);",
                  "    console.log(\"Saved field_test_id:\", jsonData.id);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"print('Field filtering test')\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-FIELDS-001 - Default Fields Only",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Default Fields Only",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/{{field_test_id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions",
                "{field_test_id}"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "default"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-FIELDS-002 - All Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: All Fields",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "    pm.expect(jsonData).to.have.property(\"source_code\");",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "    pm.expect(jsonData).to.have.property(\"stderr\");",
                  "    pm.expect(jsonData).to.have.property(\"meta\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/{{field_test_id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions",
                "{field_test_id}"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "all"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-FIELDS-003 - Custom Field Selection",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Custom Field Selection",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/{{field_test_id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions",
                "{field_test_id}"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "id,status,stdout"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-FIELDS-004 - Extended Default Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Extended Default Fields",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/{{field_test_id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions",
                "{field_test_id}"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "default,source_code,meta"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-FIELDS-005 - Invalid Field Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Invalid Field Name",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/{{field_test_id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions",
                "{field_test_id}"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "nonexistent_field"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-FIELDS-006 - Fields in List Endpoint",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Fields in List Endpoint",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"items\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "default,meta"
                },
                {
                  "key": "page_size",
                  "value": "5"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "TC-FIELDS-007 - Fields in Batch Endpoint",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Fields in Batch Endpoint",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response is an array\", function() {",
                  "    pm.expect(jsonData).to.be.an(\"array\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/batch",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions",
                "batch"
              ],
              "query": [
                {
                  "key": "ids",
                  "value": "{{field_test_id}}"
                },
                {
                  "key": "fields",
                  "value": "id,status,language_id"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Field Filtering"
    },
    {
      "name": "Language-Specific Tests - Python",
      "item": [
        {
          "name": "TC-LANG-PY-001 - Python Hello World",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Python Hello World",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "    pm.expect(jsonData.stdout).to.eql(\"Hello, World!\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"print('Hello, World!')\",\n  \"language_id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-PY-002 - Python Input/Output",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Python Input/Output",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.stdout).to.eql(\"Name: Alice, Age: 25\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"name = input()\\nage = input()\\nprint(f'Name: {name}, Age: {age}')\",\n  \"language_id\": 1,\n  \"stdin\": \"Alice\\n25\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-PY-003 - Python Math Operations",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Python Math Operations",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.stdout).to.eql(\"Sum: 15\\nProduct: 50\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"a, b = map(int, input().split())\\nprint(f'Sum: {a + b}')\\nprint(f'Product: {a * b}')\",\n  \"language_id\": 1,\n  \"stdin\": \"10 5\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-PY-004 - Python with Additional Files",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Python with Additional Files",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "    pm.expect(jsonData.stdout).to.include(\"Result: 15\");",
                  "    pm.expect(jsonData.stdout).to.include(\"Greetings from helper!\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"from helper import add_numbers, greet\\n\\nresult = add_numbers(5, 10)\\nprint(f'Result: {result}')\\nprint(greet('helper'))\",\n  \"language_id\": 1,\n  \"additional_files\": [\n    {\n      \"name\": \"helper.py\",\n      \"content\": \"def add_numbers(a, b):\\n    return a + b\\n\\ndef greet(name):\\n    return f'Greetings from {name}!'\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Language-Specific Tests - Python"
    },
    {
      "name": "Language-Specific Tests - Node.js",
      "item": [
        {
          "name": "TC-LANG-NODE-001 - Node.js Hello World",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Node.js Hello World",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "    pm.expect(jsonData.stdout).to.eql(\"Hello, World!\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"console.log('Hello, World!');\",\n  \"language_id\": 2\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-NODE-002 - Node.js Array Operations",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Node.js Array Operations",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.stdout).to.eql(\"Sum: 15\\nLength: 5\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"const arr = [1, 2, 3, 4, 5];\\nconst sum = arr.reduce((a, b) => a + b, 0);\\nconsole.log(`Sum: ${sum}`);\\nconsole.log(`Length: ${arr.length}`);\",\n  \"language_id\": 2\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-NODE-003 - Node.js String Manipulation",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Node.js String Manipulation",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.stdout).to.eql(\"HELLO WORLD\\nworld hello\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"const str = 'hello world';\\nconsole.log(str.toUpperCase());\\nconsole.log(str.split(' ').reverse().join(' '));\",\n  \"language_id\": 2\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-NODE-004 - Node.js with Additional Files",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Node.js with Additional Files",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "    pm.expect(jsonData.stdout).to.include(\"Sum: 30\");",
                  "    pm.expect(jsonData.stdout).to.include(\"Product: 200\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"const math = require('./mathHelper');\\n\\nconst sum = math.add(10, 20);\\nconst product = math.multiply(10, 20);\\nconsole.log(`Sum: ${sum}`);\\nconsole.log(`Product: ${product}`);\",\n  \"language_id\": 2,\n  \"additional_files\": [\n    {\n      \"name\": \"mathHelper.js\",\n      \"content\": \"module.exports = {\\n  add: (a, b) => a + b,\\n  multiply: (a, b) => a * b\\n};\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Language-Specific Tests - Node.js"
    },
    {
      "name": "Language-Specific Tests - C",
      "item": [
        {
          "name": "TC-LANG-C-001 - C Hello World",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: C Hello World",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "    pm.expect(jsonData.stdout).to.eql(\"Hello, World!\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"#include <stdio.h>\\n\\nint main() {\\n    printf(\\\"Hello, World!\\\\n\\\");\\n    return 0;\\n}\",\n  \"language_id\": 3\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-C-002 - C Input/Output",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: C Input/Output",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.stdout).to.eql(\"Sum: 15\\nProduct: 50\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"#include <stdio.h>\\n\\nint main() {\\n    int a, b;\\n    scanf(\\\"%d %d\\\", &a, &b);\\n    printf(\\\"Sum: %d\\\\n\\\", a + b);\\n    printf(\\\"Product: %d\\\\n\\\", a * b);\\n    return 0;\\n}\",\n  \"language_id\": 3,\n  \"stdin\": \"10 5\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-C-003 - C Arrays",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: C Arrays",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.stdout).to.eql(\"Sum: 15\\nSize: 5\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"#include <stdio.h>\\n\\nint main() {\\n    int arr[] = {1, 2, 3, 4, 5};\\n    int sum = 0;\\n    int size = sizeof(arr) / sizeof(arr[0]);\\n    for (int i = 0; i < size; i++) {\\n        sum += arr[i];\\n    }\\n    printf(\\\"Sum: %d\\\\n\\\", sum);\\n    printf(\\\"Size: %d\\\\n\\\", size);\\n    return 0;\\n}\",\n  \"language_id\": 3\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-C-004 - C with Additional Files",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: C with Additional Files",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "    pm.expect(jsonData.stdout).to.include(\"Sum: 30\");",
                  "    pm.expect(jsonData.stdout).to.include(\"Product: 200\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"#include <stdio.h>\\n#include \\\"math_ops.h\\\"\\n\\nint main() {\\n    int a = 10, b = 20;\\n    printf(\\\"Sum: %d\\\\n\\\", add(a, b));\\n    printf(\\\"Product: %d\\\\n\\\", multiply(a, b));\\n    return 0;\\n}\",\n  \"language_id\": 3,\n  \"additional_files\": [\n    {\n      \"name\": \"math_ops.h\",\n      \"content\": \"#ifndef MATH_OPS_H\\n#define MATH_OPS_H\\n\\nint add(int a, int b);\\nint multiply(int a, int b);\\n\\n#endif\"\n    },\n    {\n      \"name\": \"math_ops.c\",\n      \"content\": \"#include \\\"math_ops.h\\\"\\n\\nint add(int a, int b) {\\n    return a + b;\\n}\\n\\nint multiply(int a, int b) {\\n    return a * b;\\n}\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Language-Specific Tests - C"
    },
    {
      "name": "Language-Specific Tests - C++",
      "item": [
        {
          "name": "TC-LANG-CPP-001 - C++ Hello World",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: C++ Hello World",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "    pm.expect(jsonData.stdout).to.eql(\"Hello, World!\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"#include <iostream>\\nusing namespace std;\\n\\nint main() {\\n    cout << \\\"Hello, World!\\\" << endl;\\n    return 0;\\n}\",\n  \"language_id\": 4\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-CPP-002 - C++ Vector Operations",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: C++ Vector Operations",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.stdout).to.eql(\"Sum: 15\\nSize: 5\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"#include <iostream>\\n#include <vector>\\nusing namespace std;\\n\\nint main() {\\n    vector<int> vec = {1, 2, 3, 4, 5};\\n    int sum = 0;\\n    for (int num : vec) {\\n        sum += num;\\n    }\\n    cout << \\\"Sum: \\\" << sum << endl;\\n    cout << \\\"Size: \\\" << vec.size() << endl;\\n    return 0;\\n}\",\n  \"language_id\": 4\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-CPP-003 - C++ String Operations",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: C++ String Operations",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.stdout).to.eql(\"hello\\nolleh\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"#include <iostream>\\n#include <string>\\n#include <algorithm>\\nusing namespace std;\\n\\nint main() {\\n    string str = \\\"hello\\\";\\n    cout << str << endl;\\n    reverse(str.begin(), str.end());\\n    cout << str << endl;\\n    return 0;\\n}\",\n  \"language_id\": 4\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-CPP-004 - C++ with Additional Files",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: C++ with Additional Files",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "    pm.expect(jsonData.stdout).to.include(\"Sum: 30\");",
                  "    pm.expect(jsonData.stdout).to.include(\"Product: 200\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"#include <iostream>\\n#include \\\"Calculator.h\\\"\\nusing namespace std;\\n\\nint main() {\\n    Calculator calc;\\n    cout << \\\"Sum: \\\" << calc.add(10, 20) << endl;\\n    cout << \\\"Product: \\\" << calc.multiply(10, 20) << endl;\\n    return 0;\\n}\",\n  \"language_id\": 4,\n  \"additional_files\": [\n    {\n      \"name\": \"Calculator.h\",\n      \"content\": \"#ifndef CALCULATOR_H\\n#define CALCULATOR_H\\n\\nclass Calculator {\\npublic:\\n    int add(int a, int b);\\n    int multiply(int a, int b);\\n};\\n\\n#endif\"\n    },\n    {\n      \"name\": \"Calculator.cpp\",\n      \"content\": \"#include \\\"Calculator.h\\\"\\n\\nint Calculator::add(int a, int b) {\\n    return a + b;\\n}\\n\\nint Calculator::multiply(int a, int b) {\\n    return a * b;\\n}\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Language-Specific Tests - C++"
    },
    {
      "name": "Language-Specific Tests - Java",
      "item": [
        {
          "name": "TC-LANG-JAVA-001 - Java Hello World",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Java Hello World",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "    pm.expect(jsonData.stdout).to.eql(\"Hello, World!\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"public class Main {\\n    public static void main(String[] args) {\\n        System.out.println(\\\"Hello, World!\\\");\\n    }\\n}\",\n  \"language_id\": 5\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-JAVA-002 - Java Input/Output",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Java Input/Output",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.stdout).to.eql(\"Sum: 15\\nProduct: 50\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        System.out.println(\\\"Sum: \\\" + (a + b));\\n        System.out.println(\\\"Product: \\\" + (a * b));\\n    }\\n}\",\n  \"language_id\": 5,\n  \"stdin\": \"10 5\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-JAVA-003 - Java ArrayList",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Java ArrayList",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.stdout).to.eql(\"Sum: 6\\nSize: 3\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"import java.util.ArrayList;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        ArrayList<Integer> list = new ArrayList<>();\\n        list.add(1);\\n        list.add(2);\\n        list.add(3);\\n        int sum = 0;\\n        for (int num : list) {\\n            sum += num;\\n        }\\n        System.out.println(\\\"Sum: \\\" + sum);\\n        System.out.println(\\\"Size: \\\" + list.size());\\n    }\\n}\",\n  \"language_id\": 5\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-JAVA-004 - Java with Additional Files",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Java with Additional Files",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "    pm.expect(jsonData.stdout).to.include(\"Sum: 30\");",
                  "    pm.expect(jsonData.stdout).to.include(\"Product: 200\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"public class Main {\\n    public static void main(String[] args) {\\n        Calculator calc = new Calculator();\\n        System.out.println(\\\"Sum: \\\" + calc.add(10, 20));\\n        System.out.println(\\\"Product: \\\" + calc.multiply(10, 20));\\n    }\\n}\",\n  \"language_id\": 5,\n  \"additional_files\": [\n    {\n      \"name\": \"Calculator.java\",\n      \"content\": \"public class Calculator {\\n    public int add(int a, int b) {\\n        return a + b;\\n    }\\n    \\n    public int multiply(int a, int b) {\\n        return a * b;\\n    }\\n}\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Language-Specific Tests - Java"
    },
    {
      "name": "Language-Specific Tests - C#",
      "item": [
        {
          "name": "TC-LANG-CS-001 - C# Hello World",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: C# Hello World",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "    pm.expect(jsonData.stdout).to.eql(\"Hello, World!\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"using System;\\n\\nclass Program {\\n    static void Main() {\\n        Console.WriteLine(\\\"Hello, World!\\\");\\n    }\\n}\",\n  \"language_id\": 6\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-CS-002 - C# Input/Output",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: C# Input/Output",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.stdout).to.eql(\"Sum: 15\\nProduct: 50\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"using System;\\n\\nclass Program {\\n    static void Main() {\\n        string[] input = Console.ReadLine().Split();\\n        int a = int.Parse(input[0]);\\n        int b = int.Parse(input[1]);\\n        Console.WriteLine($\\\"Sum: {a + b}\\\");\\n        Console.WriteLine($\\\"Product: {a * b}\\\");\\n    }\\n}\",\n  \"language_id\": 6,\n  \"stdin\": \"10 5\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-CS-003 - C# List Operations",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: C# List Operations",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.stdout).to.eql(\"Sum: 15\\nCount: 5\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.Linq;\\n\\nclass Program {\\n    static void Main() {\\n        List<int> list = new List<int> {1, 2, 3, 4, 5};\\n        int sum = list.Sum();\\n        Console.WriteLine($\\\"Sum: {sum}\\\");\\n        Console.WriteLine($\\\"Count: {list.Count}\\\");\\n    }\\n}\",\n  \"language_id\": 6\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-CS-004 - C# with Additional Files",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: C# with Additional Files",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "    pm.expect(jsonData.stdout).to.include(\"Sum: 30\");",
                  "    pm.expect(jsonData.stdout).to.include(\"Product: 200\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"using System;\\n\\nclass Program {\\n    static void Main() {\\n        Calculator calc = new Calculator();\\n        Console.WriteLine($\\\"Sum: {calc.Add(10, 20)}\\\");\\n        Console.WriteLine($\\\"Product: {calc.Multiply(10, 20)}\\\");\\n    }\\n}\",\n  \"language_id\": 6,\n  \"additional_files\": [\n    {\n      \"name\": \"Calculator.cs\",\n      \"content\": \"using System;\\n\\npublic class Calculator {\\n    public int Add(int a, int b) {\\n        return a + b;\\n    }\\n    \\n    public int Multiply(int a, int b) {\\n        return a * b;\\n    }\\n}\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Language-Specific Tests - C#"
    },
    {
      "name": "Language-Specific Tests - Go",
      "item": [
        {
          "name": "TC-LANG-GO-001 - Go Hello World",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Go Hello World",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "    pm.expect(jsonData.stdout).to.eql(\"Hello, World!\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"package main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n    fmt.Println(\\\"Hello, World!\\\")\\n}\",\n  \"language_id\": 7\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-GO-002 - Go Input/Output",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Go Input/Output",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.stdout).to.eql(\"Sum: 15\\nProduct: 50\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"package main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n    var a, b int\\n    fmt.Scan(&a, &b)\\n    fmt.Printf(\\\"Sum: %d\\\\n\\\", a+b)\\n    fmt.Printf(\\\"Product: %d\\\\n\\\", a*b)\\n}\",\n  \"language_id\": 7,\n  \"stdin\": \"10 5\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-GO-003 - Go Slice Operations",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Go Slice Operations",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.stdout).to.eql(\"Sum: 15\\nLength: 5\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"package main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n    slice := []int{1, 2, 3, 4, 5}\\n    sum := 0\\n    for _, v := range slice {\\n        sum += v\\n    }\\n    fmt.Printf(\\\"Sum: %d\\\\n\\\", sum)\\n    fmt.Printf(\\\"Length: %d\\\\n\\\", len(slice))\\n}\",\n  \"language_id\": 7\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-GO-004 - Go with Additional Files",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Go with Additional Files",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "    pm.expect(jsonData.stdout).to.include(\"Sum: 30\");",
                  "    pm.expect(jsonData.stdout).to.include(\"Product: 200\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"package main\\n\\nimport (\\n    \\\"fmt\\\"\\n    \\\"./calc\\\"\\n)\\n\\nfunc main() {\\n    fmt.Printf(\\\"Sum: %d\\\\n\\\", calc.Add(10, 20))\\n    fmt.Printf(\\\"Product: %d\\\\n\\\", calc.Multiply(10, 20))\\n}\",\n  \"language_id\": 7,\n  \"additional_files\": [\n    {\n      \"name\": \"calc/calc.go\",\n      \"content\": \"package calc\\n\\nfunc Add(a, b int) int {\\n    return a + b\\n}\\n\\nfunc Multiply(a, b int) int {\\n    return a * b\\n}\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Language-Specific Tests - Go"
    },
    {
      "name": "Language-Specific Tests - Rust",
      "item": [
        {
          "name": "TC-LANG-RUST-001 - Rust Hello World",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Rust Hello World",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "    pm.expect(jsonData.stdout).to.eql(\"Hello, World!\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"fn main() {\\n    println!(\\\"Hello, World!\\\");\\n}\",\n  \"language_id\": 8\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-RUST-002 - Rust Input/Output",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Rust Input/Output",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.stdout).to.eql(\"Sum: 15\\nProduct: 50\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"use std::io;\\n\\nfn main() {\\n    let mut input = String::new();\\n    io::stdin().read_line(&mut input).unwrap();\\n    let nums: Vec<i32> = input.trim().split_whitespace()\\n        .map(|s| s.parse().unwrap()).collect();\\n    println!(\\\"Sum: {}\\\", nums[0] + nums[1]);\\n    println!(\\\"Product: {}\\\", nums[0] * nums[1]);\\n}\",\n  \"language_id\": 8,\n  \"stdin\": \"10 5\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-RUST-003 - Rust Vector Operations",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Rust Vector Operations",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.stdout).to.eql(\"Sum: 15\\nLength: 5\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"fn main() {\\n    let vec = vec![1, 2, 3, 4, 5];\\n    let sum: i32 = vec.iter().sum();\\n    println!(\\\"Sum: {}\\\", sum);\\n    println!(\\\"Length: {}\\\", vec.len());\\n}\",\n  \"language_id\": 8\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-RUST-004 - Rust with Additional Files",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Rust with Additional Files",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "    pm.expect(jsonData.stdout).to.include(\"Sum: 30\");",
                  "    pm.expect(jsonData.stdout).to.include(\"Product: 200\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"mod calculator;\\nuse calculator::Calculator;\\n\\nfn main() {\\n    let calc = Calculator::new();\\n    println!(\\\"Sum: {}\\\", calc.add(10, 20));\\n    println!(\\\"Product: {}\\\", calc.multiply(10, 20));\\n}\",\n  \"language_id\": 8,\n  \"additional_files\": [\n    {\n      \"name\": \"calculator.rs\",\n      \"content\": \"pub struct Calculator;\\n\\nimpl Calculator {\\n    pub fn new() -> Self {\\n        Calculator\\n    }\\n    \\n    pub fn add(&self, a: i32, b: i32) -> i32 {\\n        a + b\\n    }\\n    \\n    pub fn multiply(&self, a: i32, b: i32) -> i32 {\\n        a * b\\n    }\\n}\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Language-Specific Tests - Rust"
    },
    {
      "name": "Language-Specific Tests - PHP",
      "item": [
        {
          "name": "TC-LANG-PHP-001 - PHP Hello World",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: PHP Hello World",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "    pm.expect(jsonData.stdout).to.eql(\"Hello, World!\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"<?php\\necho \\\"Hello, World!\\\\n\\\";\\n?>\",\n  \"language_id\": 9\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-PHP-002 - PHP Input/Output",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: PHP Input/Output",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.stdout).to.eql(\"Sum: 15\\nProduct: 50\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"<?php\\n$input = trim(fgets(STDIN));\\n$nums = explode(' ', $input);\\n$a = (int)$nums[0];\\n$b = (int)$nums[1];\\necho \\\"Sum: \\\" . ($a + $b) . \\\"\\\\n\\\";\\necho \\\"Product: \\\" . ($a * $b) . \\\"\\\\n\\\";\\n?>\",\n  \"language_id\": 9,\n  \"stdin\": \"10 5\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-PHP-003 - PHP Array Operations",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: PHP Array Operations",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.stdout).to.eql(\"Sum: 15\\nCount: 5\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"<?php\\n$arr = [1, 2, 3, 4, 5];\\n$sum = array_sum($arr);\\necho \\\"Sum: \\\" . $sum . \\\"\\\\n\\\";\\necho \\\"Count: \\\" . count($arr) . \\\"\\\\n\\\";\\n?>\",\n  \"language_id\": 9\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-PHP-004 - PHP with Additional Files",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: PHP with Additional Files",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "    pm.expect(jsonData.stdout).to.include(\"Sum: 30\");",
                  "    pm.expect(jsonData.stdout).to.include(\"Product: 200\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"<?php\\nrequire_once 'Calculator.php';\\n\\n$calc = new Calculator();\\necho \\\"Sum: \\\" . $calc->add(10, 20) . \\\"\\\\n\\\";\\necho \\\"Product: \\\" . $calc->multiply(10, 20) . \\\"\\\\n\\\";\\n?>\",\n  \"language_id\": 9,\n  \"additional_files\": [\n    {\n      \"name\": \"Calculator.php\",\n      \"content\": \"<?php\\nclass Calculator {\\n    public function add($a, $b) {\\n        return $a + $b;\\n    }\\n    \\n    public function multiply($a, $b) {\\n        return $a * $b;\\n    }\\n}\\n?>\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Language-Specific Tests - PHP"
    },
    {
      "name": "Language-Specific Tests - Lua",
      "item": [
        {
          "name": "TC-LANG-LUA-001 - Lua Hello World",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Lua Hello World",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "    pm.expect(jsonData.stdout).to.eql(\"Hello, World!\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"print(\\\"Hello, World!\\\")\",\n  \"language_id\": 10\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-LUA-002 - Lua Input/Output",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Lua Input/Output",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.stdout).to.eql(\"Sum: 15\\nProduct: 50\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"local input = io.read()\\nlocal a, b = input:match(\\\"(%d+)%s+(%d+)\\\")\\na, b = tonumber(a), tonumber(b)\\nprint(\\\"Sum: \\\" .. (a + b))\\nprint(\\\"Product: \\\" .. (a * b))\",\n  \"language_id\": 10,\n  \"stdin\": \"10 5\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-LUA-003 - Lua Table Operations",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Lua Table Operations",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.stdout).to.eql(\"Sum: 15\\nLength: 5\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"local t = {1, 2, 3, 4, 5}\\nlocal sum = 0\\nfor i = 1, #t do\\n    sum = sum + t[i]\\nend\\nprint(\\\"Sum: \\\" .. sum)\\nprint(\\\"Length: \\\" .. #t)\",\n  \"language_id\": 10\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-LUA-004 - Lua with Additional Files",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Lua with Additional Files",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "    pm.expect(jsonData.stdout).to.include(\"Sum: 30\");",
                  "    pm.expect(jsonData.stdout).to.include(\"Product: 200\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"local calc = require('calculator')\\n\\nprint('Sum: ' .. calc.add(10, 20))\\nprint('Product: ' .. calc.multiply(10, 20))\",\n  \"language_id\": 10,\n  \"additional_files\": [\n    {\n      \"name\": \"calculator.lua\",\n      \"content\": \"local M = {}\\n\\nfunction M.add(a, b)\\n    return a + b\\nend\\n\\nfunction M.multiply(a, b)\\n    return a * b\\nend\\n\\nreturn M\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Language-Specific Tests - Lua"
    },
    {
      "name": "Language-Specific Tests - Pascal",
      "item": [
        {
          "name": "TC-LANG-PAS-001 - Pascal Hello World",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Pascal Hello World",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "    pm.expect(jsonData.stdout).to.eql(\"Hello, World!\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"program HelloWorld;\\nbegin\\n  writeln('Hello, World!');\\nend.\",\n  \"language_id\": 11\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-PAS-002 - Pascal Input/Output",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Pascal Input/Output",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.stdout).to.eql(\"Sum: 15\\nProduct: 50\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"program InputOutput;\\nvar\\n  a, b: integer;\\nbegin\\n  readln(a, b);\\n  writeln('Sum: ', a + b);\\n  writeln('Product: ', a * b);\\nend.\",\n  \"language_id\": 11,\n  \"stdin\": \"10 5\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-PAS-003 - Pascal Array Operations",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Pascal Array Operations",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.stdout).to.eql(\"Sum: 15\\nLength: 5\\n\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"program ArrayOps;\\nvar\\n  arr: array[1..5] of integer = (1, 2, 3, 4, 5);\\n  sum, i: integer;\\nbegin\\n  sum := 0;\\n  for i := 1 to 5 do\\n    sum := sum + arr[i];\\n  writeln('Sum: ', sum);\\n  writeln('Length: 5');\\nend.\",\n  \"language_id\": 11\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-PAS-004 - Pascal with Additional Files",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: Pascal with Additional Files",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "    pm.expect(jsonData.stdout).to.include(\"Sum: 30\");",
                  "    pm.expect(jsonData.stdout).to.include(\"Product: 200\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"program Main;\\nuses MathUnit;\\nvar\\n  calc: TCalculator;\\nbegin\\n  calc := TCalculator.Create;\\n  writeln('Sum: ', calc.Add(10, 20));\\n  writeln('Product: ', calc.Multiply(10, 20));\\n  calc.Free;\\nend.\",\n  \"language_id\": 11,\n  \"additional_files\": [\n    {\n      \"name\": \"MathUnit.pas\",\n      \"content\": \"unit MathUnit;\\n\\ninterface\\n\\ntype\\n  TCalculator = class\\n    function Add(a, b: Integer): Integer;\\n    function Multiply(a, b: Integer): Integer;\\n  end;\\n\\nimplementation\\n\\nfunction TCalculator.Add(a, b: Integer): Integer;\\nbegin\\n  Result := a + b;\\nend;\\n\\nfunction TCalculator.Multiply(a, b: Integer): Integer;\\nbegin\\n  Result := a * b;\\nend;\\n\\nend.\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Language-Specific Tests - Pascal"
    },
    {
      "name": "Language-Specific Tests - SQL",
      "item": [
        {
          "name": "TC-LANG-SQL-001 - SQL Simple Query",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: SQL Simple Query",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"SELECT 'Hello, World!' AS message;\",\n  \"language_id\": 12\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-SQL-002 - SQL Create and Query Table",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: SQL Create and Query Table",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"CREATE TABLE numbers (value INTEGER);\\nINSERT INTO numbers VALUES (1), (2), (3), (4), (5);\\nSELECT SUM(value) as total FROM numbers;\",\n  \"language_id\": 12\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-SQL-003 - SQL Aggregation",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: SQL Aggregation",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \"CREATE TABLE data (id INTEGER, name TEXT);\\nINSERT INTO data VALUES (1, 'Alice'), (2, 'Bob'), (3, 'Charlie');\\nSELECT COUNT(*) as count FROM data;\",\n  \"language_id\": 12\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        },
        {
          "name": "TC-LANG-SQL-004 - SQL with Additional Files",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set timeout for long-running requests",
                  "pm.request.timeout = pm.variables.get(\"waitForProcessing\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test: SQL with Additional Files",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let jsonData;",
                  "try {",
                  "    jsonData = pm.response.json();",
                  "} catch (e) {",
                  "    console.error(\"Failed to parse JSON response:\", e);",
                  "}",
                  "",
                  "pm.test(\"Response has required fields\", function() {",
                  "    pm.expect(jsonData).to.have.property(\"status\");",
                  "    pm.expect(jsonData).to.have.property(\"stdout\");",
                  "});",
                  "",
                  "pm.test(\"Response values match expected\", function() {",
                  "    pm.expect(jsonData.status).to.eql(\"FINISHED\");",
                  "    pm.expect(jsonData.stdout).to.include(\"Alice\");",
                  "    pm.expect(jsonData.stdout).to.include(\"Bob\");",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.variables.get(\"timeout\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/submissions/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "submissions"
              ],
              "query": [
                {
                  "key": "wait",
                  "value": "true"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_code\": \".read schema.sql\\n.read data.sql\\nSELECT * FROM users ORDER BY id;\",\n  \"language_id\": 12,\n  \"additional_files\": [\n    {\n      \"name\": \"schema.sql\",\n      \"content\": \"CREATE TABLE users (id INTEGER PRIMARY KEY, name TEXT, age INTEGER);\"\n    },\n    {\n      \"name\": \"data.sql\",\n      \"content\": \"INSERT INTO users VALUES (1, 'Alice', 25);\\nINSERT INTO users VALUES (2, 'Bob', 30);\\nINSERT INTO users VALUES (3, 'Charlie', 35);\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": []
        }
      ],
      "description": "Test suite: Language-Specific Tests - SQL"
    }
  ]
}